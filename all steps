@Configuration
@EnableBatchProcessing
public class DCrRawJobConfig {

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Autowired
    private ComboFilePartitioner partitioner;

    @Autowired
    private ItemReader<String> comboFileReader;

    @Autowired
    private ItemProcessor<String, String> comboFileProcessor;

    @Autowired
    private ItemWriter<String> comboFileWriter;

    @Autowired
    private StepExecutionListener stepListener;

    @Bean
    public Step crrawStep() {
        return stepBuilderFactory.get("crrawStep")
            .partitioner("partitionedCrrawStep", partitioner)
            .step(crrawWorkerStep())
            .gridSize(5)
            .listener(stepListener)
            .build();
    }

    @Bean
    public Step crrawWorkerStep() {
        return stepBuilderFactory.get("crrawWorkerStep")
            .<String, String>chunk(100)
            .reader(comboFileReader)
            .processor(comboFileProcessor)
            .writer(comboFileWriter)
            .build();
    }

    @Bean
    public Step statsStep() {
        return stepBuilderFactory.get("statsStep")
            .tasklet((contribution, chunkContext) -> {
                System.out.println("Gathering DB stats...");
                // Call service or logic here
                return RepeatStatus.FINISHED;
            })
            .build();
    }

    @Bean
    public Step exportStep() {
        return stepBuilderFactory.get("exportStep")
            .tasklet((contribution, chunkContext) -> {
                System.out.println("Performing exports...");
                return RepeatStatus.FINISHED;
            })
            .build();
    }

    // Repeat pattern for 7 more steps
    @Bean public Step step4() { return taskletStep("step4"); }
    @Bean public Step step5() { return taskletStep("step5"); }
    @Bean public Step step6() { return taskletStep("step6"); }
    @Bean public Step step7() { return taskletStep("step7"); }
    @Bean public Step step8() { return taskletStep("step8"); }
    @Bean public Step step9() { return taskletStep("step9"); }
    @Bean public Step step10() { return taskletStep("step10"); }

    private Step taskletStep(String name) {
        return stepBuilderFactory.get(name)
            .tasklet((contribution, chunkContext) -> {
                System.out.println("Running " + name + "...");
                return RepeatStatus.FINISHED;
            })
            .build();
    }

    @Bean
    public Job dCrRawJob() {
        return jobBuilderFactory.get("dCrRawJob")
            .start(crrawStep())
            .next(statsStep())
            .next(exportStep())
            .next(step4())
            .next(step5())
            .next(step6())
            .next(step7())
            .next(step8())
            .next(step9())
            .next(step10())
            .build();
    }
}
